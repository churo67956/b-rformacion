//TEMPORIZADOR DINAMICO
TON_dynamic : REFERENCETO TO TON;

//TEMPORIZADORES
TON_5seg();//temporizador de 5 segundos
TON_5seg.PT = T#5s;
TON_2seg();//temporizador de 2 segundos
TON_5seg.PT = T#2s;
TON_3seg();//temporizador de 3 segundos
TON_5seg.PT = T#3s;
TON_gap();//temporizador de 500 milis
TON_5seg.PT = T#500ms;

//ESTADOS SEMAFOROS
GREEN := 0;//verde
YELLOW := 1;//amarillo	
RED := 2;//rojo
YELLOW_IN := 4;//amarillo intermitente
GREEN_IN := 5;//verde intermitente
OFF := 3;//apagado

//FLUJO DE LA APLICACION
NORMAL := 0;//flujo de normal solo semaforo de coches
ALTERNATIVE := 1;//flujo de datos alternativo con el boton pulsado


//
//PROGRAMA PRINCIPAL
//


IF WORKFLOW = NORMAL THEN //solo esta en funcionamiento el semaforo
	IF  TON_dymanic.Q AND TON_dymanic.Q = TRUE THEN //el temporizador ha finalizado, actualizar el estado
		updateState;//actualizamos el estado, al que toque
	END_IF
	//DENTRO DEL FLUJO NORMAL ES NECESARIO COMPROBAR SI EXISTE ALGUNA SOLICITUD DE FLUJO ALTERNATIVO
	IF di_btn_request THEN //existe solicitud,pero solo se atiende si el semaforo esta en ROJO
		IF (state1 = RED) THEN //debemos de alternar el flujo del normal al alternativo
			workflowTransition
		(*ELSE//continuamos con el flujo normal
			WORKFLOW := NORMAL //mantenemos el flujo*)
		END_IF
	END_IF
	
ELIF WORFLOW = ALTERNATIVE THEN //flujo alternativo
	IF TON_dymanic.Q AND TON_dymanic.Q = FALSE THEN //el temporizador aun no ha finalizado
		//TODO - AQUI LA IMPLEMENTACION DE LA ANIMACION INTERMITENTE
		IF (state1 = YELLOW_IN OR state2 = GREEN_IN) THEN
			intermittent;	
	ELSIF  TON_dymanic.Q AND TON_dymanic.Q  THEN//el temporizador ha finalizado, actualizar el estado
		IF (state1 = YELLOW_IN OR state2 = GREEN_IN) THEN //animacion de intermitente
			stopIntermittent;
		IF (state1 = RED OR state2 = GREEN_IN) THEN
			workflowTransition;
		ELSE
			updateState;//actualizamos el estado, al que toque
	END_IF

END_IF 

di_btn_request := FALSE;

do_cled_red := state1 = RED;
do_cled_yellow := state1 = YELLOW OR state1 = YELLOW_IN;
do_cled_green := state1 = GREEN;

do_pled_red := state2 = RED;
do_pled_yellow := state2 = YELLOW;
do_pled_green := state2 = GREEN OR state2 = GREEN_IN; 

//
//ACCIONES
//

ACTION workflowTrasition
	IF WORKFLOW = NORMAL THEN
		TON_dynaminc.IN:= FALSE; //paramos la temporizacion 
		WORKFLOW := ALTERNATIVE; //actualizamos el flujo
		state1 := YELLOW_IN;
		state2 := RED;
		
	ELSIF WORKFLOW = ALTERNATIVE THEN
		WORKFLOW := NORMAL; //actualizamos el flujo
		state1 := GREEN;
		state2:= RED;
	END_IF
	ton_dynaminc_in;
ACTION_END		 


//FUNCION DE INICIALIZACION DE LA APLICACION
ACCION init
WORKFLOW = NORMAL;//flujo normal
//WORKFLOW = ALTERNATIVO;//flujo normal
IF WORKFLOW = NORMAL THEN //solo semaforo coches
	//MODELO DE DATOS
	state1 := GREEN; //semaforo de coches a verder
	state2 := OFF; //semaforo de peatones apagado
ELSIF WORKFLOW = ALTERNATIVE THEN //partimos con el boton pulsado, semaforo de peatones y coches
	//MODELO DE DATOS
	state1 := YELLOW_IN; //semaforo de coches a amarillo, ojo en realizada ira alternado con el estado OFF
	state2 := RED; //semaforo de peatones apagado
END_IF
ton_dynamic_in;//arrancamos el temporizamos dado por los estados
ACCION_END

//funcion que actualiza el estado del semaforo de coches y peatones
ACTION ton_dynaminc_in
	IF WORKFLOW = NORMAL THEN
		IF state = GREEN OR state = RED THEN
			TON_dymanic ACCESS ADDR (TON_5seg);
		ELIF state = YELLOW THEN
			TON_dymanic ACCESS ADDR (TON_2seg);
		END_IF
	ELSIF WORKFLOW = ALTERNATIVE THEN
		IF (state1 = YELLOW_IN AND state2 = RED) OR (state1 = RED AND state2 = GREEN_IN) THEN
			TON_dymanic ACCESS ADDR (TON_3seg);
		ELSIF state1 = RED AND state2 = GREEN THEN
			TON_dymanic ACCESS ADDR (TON_5seg);
		END_IF
	END_IF
	TON_dymanic.IN := TRUE;
END_ACTION

//funcion que actualiza el estado del semaforo de coches y peatones
ACTION updateState
	IF WORKFLOW = NORMAL THEN
		IF state1 = GREEN THEN
			stata1 := YELLOW;
		ELSIF state1 = YELLOW THEN
			stata1 := RED;
		ELSIF state1 = RED THEN
			stata1 := RED;
		END_IF
	ELSIF WORKFLOW = ALTERNATIVE THEN
		IF state1 = YELLOW_IN AND state2 = RED THEN
			state1 = RED;
			state2 = GREEN;
		ELSIF state1 = RED AND state2 = GREEN THEN
			stata1 := RED;
			stata2 := GREEN_IN;
		ELSIF state1 = RED AND state2 = GREEN_IN THEN
			state1 := GREEN;
			state2 := RED;
		END_IF
	END_IF
	ton_dynaminc_in; 
END_ACTION


//se encarga de encender o apagar un led
ACTION toggle
	IF TON_gap.IN = TRUE AND TON_gap.Q = TRUE THEN //temporizacion finalizada
		TON_gap.IN := FALSE;//bajamos el flag de temporizacion
		IF interState = interTarget THEN //apagamos el led
			interState := OFF;//estado de apagado
		ELSIF interState = OFF;//encendemos el estado
			interState := interTarget ;//restablecemos el estado anterior al apagado
		ENDIF;
		TON_gap.IN := TRUE;//volvemos a lanzar la animacion
	(*ELSIF TON_gap.IN = TRUE AND TON_gap.Q = FALSE THEN 
		//temporizacion NO finalizada *)
	END_IF
END_ACTION

//lanza la animacion de intermitente
ACTION intermittent
		TON_gap.IN = TRUE;
		IF (state1 = YELLOW_IN) 
			interState := state1;//estado que vamos a realizar la animacion de intermitente
			interTarget := state1;//backup del estado para volver a restablecer tras realizar el apagado 
		ELSIF (state2 = GREEN_IN) THEN 
			interState := state2;//estado que vamos a realizar la animacion de intermitente
			interTarget := state2;//backup del estado para volver a restablecer tras realizar el apagado 
		END_IF
		toggle;
END_ACTION

//para la animacion de intermitente
ACTION stopIntermittent
	TON_gap.IN := FALSE;
END_ACTION