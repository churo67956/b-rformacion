
PROGRAM _INIT
	(* Insert code here *)
	state := WAIT;
	last_state := WAIT;
	filling_step := 1;//cantidad de llenado cada segundo
	emptying_step:= 2;//cantidad de vaciado cada segundo
	emergency_step := 4;//cantidad de vaciado cada segundo
	
	MAX_TANK_LEVEL := 10;//nivle máximo del tanque
	MAX_DEPOSIT_LEVEL := 20;//nivel maximo del deposito
	tank_level := MAX_TANK_LEVEL;//tanque lleno 
	deposit_level := MAX_DEPOSIT_LEVEL;//deposito lleno
END_PROGRAM

PROGRAM _CYCLIC
	
	IF do_emergency = FALSE THEN
		//ATENDER A LAS PETICIONES DEL USARIO
		IF di_filling THEN//peticion de llenar el tanque
			state := FILLING;//actualizamos el estado
		ELSIF di_emptying THEN//peticion de vaciar el tanqu
			state := EMPTYING;//actualizamos el estado
		ELSIF di_emergency THEN//peticion de vaciado de emergencia
			state := EMERGENCY;//actualizamos el estado
		END_IF
	END_IF	
	
	//reset timer	
	IF state <> last_state THEN
		TON_timer.IN:=FALSE;
		IF last_state = FILLING THEN
			filling_timer := 0;
		ELSIF last_state = EMPTYING THEN
			emptying_timer := 0;
		ELSIF last_state = EMERGENCY THEN
			emergency_timer := 0;
		END_IF
	END_IF
	//empezar a temporizar
	IF start_timer THEN//existe alguna peticion o continuamos a tendiendo a la peticion anterior
		start_timer := FALSE;
		TON_timer.IN:=TRUE;
		TON_timer.PT:=T#1s;//arrancamos el temporizador
		TON_timer();
	ELSE
		TON_timer.IN:= FALSE;
	END_IF	
		
	//TEMPORIZACION DE UN SEGUNDO MININA UNIDAD DE TIEMPO
	IF TON_timer.IN AND TON_timer.Q THEN//ha pasado un segundo
		IF state = FILLING THEN
			filling_timer := filling_timer + 1;
		ELSIF state = EMPTYING THEN
			emptying_timer := emptying_timer + 1;
		ELSIF state = EMERGENCY THEN
			emergency_timer := emergency_timer + 1;
		END_IF
	END_IF
		
	//RESETAMOS LAS VARIABLES DE USUARIO
	di_filling := FALSE;
	di_emptying:=FALSE;
	di_emergency := FALSE;	

	ELSIF state = FILLING THEN
		
		IF tank_level < MAX_TANK_LEVEL AND deposit_level > 0 THEN//llenar si el tanque no esta lleno y el nivel del 
			start_timer := TRUE;
			do_filling := TRUE;
			IF filling_timer > 0 THEN //nos aseguramos que han pasado un segundo
				filling_timer := 0; //reiniciamos el contador deposito mayor que el paso de llenado
				IF  deposit_level > filling_step THEN
					tank_level := tank_level + filling_step;
					deposit_level := deposit_level -filling_step;
				ELSE
					tank_level := tank_level + deposit_level;
					deposit_level := 0;
				END_IF
			END_IF
		ELSE
			start_timer := FALSE;
			do_filling := FALSE;
			state = WAIT;
		END_IF
		lastState := FILLING;		
	ELSIF state = EMPTYING THEN
		IF tank_level > 0 THEN
			start_timer := TRUE;
			do_filling := TRUE;
			IF emptying_timer > 0 THEN //nos aseguramos que han pasado un segundo
				emptying_timer := 0; //reiniciamos el contador
				IF tank_level > emptying_step THEN//vaciar si el nivel del tanque es mayor que el paso de vaciado
					tank_level := tank_level - emptying_step;
				ELSE 
					tank_level := 0;
				END_IF
			END_IF
		ELSE
			start_timer := FALSE;
			do_emptying := FALSE;
			state = WAIT;
		END_IF
		lastState := EMPTYING;
	ELSIF state = EMERGENCY THEN
		IF tank_level > 0 THEN
			start_timer := TRUE;
			do_emergency := TRUE;
			IF emergency_timer > 0 THEN //nos aseguramos que han pasado un segundo
				emergency_timer := 0; //reiniciamos el contador
				IF tank_level > emergency_step THEN//vaciar si el nivel del tanque es mayor que el paso de emergencia
					tank_level := tank_level - emergency_step;
				ELSE 
					tank_level := 0;
				END_IF
			END_IF
		ELSE
			start_timer := FALSE;
			do_emergency := FALSE;
			state = WAIT;
		END_IF
		lastState := EMERGENCY;
	END_IF
	
END_PROGRAM

PROGRAM _EXIT
	(* Insert code here *)
	 
END_PROGRAM

